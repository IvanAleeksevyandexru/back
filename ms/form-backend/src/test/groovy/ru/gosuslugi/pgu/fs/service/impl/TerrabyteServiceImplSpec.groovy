package ru.gosuslugi.pgu.fs.service.impl

import org.springframework.beans.factory.annotation.Autowired
import org.springframework.boot.test.context.SpringBootTest
import ru.gosuslugi.pgu.common.esia.search.dto.UserPersonalData
import ru.gosuslugi.pgu.dto.ApplicantAnswer
import ru.gosuslugi.pgu.dto.ScenarioDto
import ru.gosuslugi.pgu.dto.descriptor.FieldComponent
import ru.gosuslugi.pgu.dto.descriptor.ServiceDescriptor
import ru.gosuslugi.pgu.dto.descriptor.types.ComponentType
import ru.gosuslugi.pgu.fs.FormServiceApp
import ru.gosuslugi.pgu.fs.common.service.ComponentService
import ru.gosuslugi.pgu.fs.common.service.JsonProcessingService
import ru.gosuslugi.pgu.fs.component.file.UploadFileComponent
import ru.gosuslugi.pgu.fs.service.TerrabyteService
import ru.gosuslugi.pgu.terrabyte.client.TerrabyteClient
import ru.gosuslugi.pgu.terrabyte.client.model.FileInfo
import spock.lang.Specification

import java.util.function.Predicate

@SpringBootTest(classes = FormServiceApp.class)
class TerrabyteServiceImplSpec extends Specification {
    @Autowired JsonProcessingService jsonProcessingService
    @Autowired ComponentService componentService
    @Autowired UploadFileComponent uploadFileComponent

    def "should not delete files generated by delirium"() {
        TerrabyteClient terabyteClient = Mock(TerrabyteClient)
        UserPersonalData userPersonalData = Mock(UserPersonalData)

        // тестовое храниилище для терабайта
        List<FileInfo> terabyteFiles = [
                new FileInfo(mnemonic: "up1.passport.0"),
                new FileInfo(mnemonic: "up1.passport.1"),
                new FileInfo(mnemonic: "up2.passport.2"),
                new FileInfo(mnemonic: "up2.passport.3")
        ]

        terabyteClient.getAllFilesByOrderId(_, _, _) >> new ArrayList<FileInfo>(terabyteFiles)

        TerrabyteService terrabyteService = new TerrabyteServiceImpl(terabyteClient, jsonProcessingService, componentService, uploadFileComponent, userPersonalData)
        ScenarioDto scenarioDto = new ScenarioDto(applicantAnswers: [
                // минимальный ответ с перечнем файлов, прикрепленных делириумом при проактивном создании заявления
                up1 : new ApplicantAnswer(value: "{\"uploads\":[{\"value\":[{\"mnemonic\":\"up1.passport.0\"},{\"mnemonic\":\"up1.passport.1\"}]}]}")
        ])
        ServiceDescriptor descriptor = new ServiceDescriptor(applicationFields: [
                // минимальная конфигурация компонента для хранения прикрепленных файлов
                new FieldComponent(id: "up1", type: ComponentType.FileUploadComponent)
        ])

        when:
        terrabyteService.deleteRedundantFiles(scenarioDto, descriptor)

        then:
        2 * terabyteClient.deleteFile(*_) >> { arguments ->
            final FileInfo argFile = arguments[0]

            // удаляем файлы из локального хранилища (эмуляция терабайта)
            terabyteFiles.removeIf(new Predicate<FileInfo>() {
                @Override
                boolean test(FileInfo fileInfo) {
                    return fileInfo.getMnemonic() == argFile.getMnemonic()
                }
            })

            // метод должен вызываться с файлами, отсутствующими в компоненте услуге
            assert arguments[0].mnemonic == "up2.passport.2" || arguments[0].mnemonic == "up2.passport.3"
        }

        // эти файлы должны остаться
        terabyteFiles.findAll({it -> it.mnemonic == "up1.passport.0" || it.mnemonic == "up1.passport.1"}).size() == 2

        // эти файлы должны удалиться
        terabyteFiles.findAll({it -> it.mnemonic == "up2.passport.2" || it.mnemonic == "up2.passport.3"}).size() == 0
    }
}
